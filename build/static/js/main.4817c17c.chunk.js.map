{"version":3,"sources":["../node_modules/pdfjs-dist/build sync","serviceWorker.ts","PDFRangeRequestViewer.tsx","App.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Boolean","window","location","hostname","match","PDFRangeRequestViewer","url","useState","pdfDocument","setPdfDocument","page","setPage","pdfLoadingProgress","setPdfLoadingProgress","canvasRef","useRef","progressCallback","useCallback","loaded","total","useEffect","isMounted","fetch","method","headers","accept","then","headResponse","contentLength","parseInt","get","fetchedData","pdfRangeTransport","PDFDataRangeTransport","Uint8Array","requestDataRange","begin","end","range","fetchRange","rangeResponse","a","ok","rangeLength","onDataProgress","arrayBuffer","onDataRange","addProgressListener","getDocument","length","promise","getPage","pdfPage","viewport","getViewport","scale","canvas","current","width","height","ctx","getContext","render","canvasContext","style","background","paddingBottom","color","padding","marginBottom","numPages","toFixed","float","disabled","onClick","margin","display","boxShadow","ref","App","setUrl","type","value","onChange","target","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4817c17c.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 3;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { getDocument, PDFDataRangeTransport, PDFDocumentProxy, PDFProgressData, PDFPageProxy } from 'pdfjs-dist/webpack';\n\nconst fetchRange = (url: string, begin: number, end: number) => {\n  return fetch(url, {\n    method: 'get',\n    headers: {\n      range: `bytes=${begin}-${end}`,\n      accept: 'application/pdf'\n    }\n  })\n}\n\nfunction PDFRangeRequestViewer({url}: {url: string}) {\n  const [pdfDocument, setPdfDocument] = useState<PDFDocumentProxy | null>(null);\n  const [page, setPage] = useState(1);\n  const [pdfLoadingProgress, setPdfLoadingProgress] = useState<PDFProgressData | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const progressCallback = useCallback((loaded: number, total: number) => {\n    setPdfLoadingProgress({ loaded, total });\n  }, [pdfLoadingProgress])\n\n  useEffect(() => {\n    let isMounted = true;\n    setPage(1);\n    fetch(url, {\n      method: 'head',\n      headers: {\n        accept: 'application/pdf'\n      }\n    }).then(headResponse => {\n      const contentLength = parseInt(headResponse.headers.get('Content-Length') || '0');\n      let fetchedData = 0;\n      if (contentLength === 0) throw new Error(\"Content Length is 0\");\n\n      const pdfRangeTransport = new PDFDataRangeTransport(contentLength, new Uint8Array());\n      pdfRangeTransport.requestDataRange = (begin: number, end: number) => {\n        fetchRange(url, begin, end - 1).then(async (rangeResponse) => {\n          if (rangeResponse.ok) {\n            const rangeLength = parseInt(rangeResponse.headers.get('Content-Length') || '0');\n            fetchedData += rangeLength;\n            pdfRangeTransport.onDataProgress(fetchedData, contentLength);\n            pdfRangeTransport.onDataRange(begin, await rangeResponse.arrayBuffer());\n          }\n        });\n      }\n\n      pdfRangeTransport.addProgressListener(progressCallback)\n      getDocument({\n        range: pdfRangeTransport,\n        length: contentLength\n      }).promise\n        .then((pdfDocument: PDFDocumentProxy) => {\n          if (!isMounted) return;\n          setPdfDocument(pdfDocument);\n        });\n    })\n    return () => {\n      isMounted = false;\n    }\n  }, [url])\n\n  useEffect(() => {\n    if (!pdfDocument) return;\n    pdfDocument.getPage(page).then((pdfPage: PDFPageProxy) => {\n      const viewport = pdfPage.getViewport({ scale: 1.0 });\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      canvas.width = viewport.width;\n      canvas.height = viewport.height;\n      const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n      const renderTask = pdfPage.render({\n        canvasContext: ctx,\n        viewport: viewport,\n      });\n      return renderTask.promise;\n    });\n  }, [pdfDocument, page, canvasRef])\n\n  return (\n    <div style={{background: '#ccc', paddingBottom: '10px'}}>\n      {pdfDocument && <div style={{background: \"#222\", color: 'white', padding: '15px 35px', marginBottom: '10px'}}>\n        Pages : {page} / {pdfDocument.numPages} Downloaded bytes : {pdfLoadingProgress && `${pdfLoadingProgress.loaded} / ${pdfLoadingProgress.total} (${(pdfLoadingProgress.loaded / pdfLoadingProgress.total * 100).toFixed(2)} %)`}\n        <div style={{ float: 'right' }}>\n          <button disabled={page - 1 <= 0} onClick={() => setPage(page - 1)}>Prev page</button>\n          <button disabled={page + 1 > pdfDocument.numPages} onClick={() => setPage(page + 1)}>Next page</button>\n        </div>\n      </div>}\n      <canvas style={{margin: '0 auto', display: 'block', boxShadow: '0 0 2px 1px #777'}} ref={canvasRef}></canvas>\n    </div>\n  );\n}\n\nexport default PDFRangeRequestViewer;","import React, { useState, ChangeEvent } from \"react\";\nimport PDFRangeRequestViewer from \"./PDFRangeRequestViewer\";\n\nexport default function App() {\n    const [url, setUrl] = useState('https://cors-anywhere.herokuapp.com/https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf');\n    return <>\n        PDF Url <input type='text' value={url} onChange={(e: ChangeEvent<HTMLInputElement>) => setUrl(e.target.value)} style={{width: '100%'}} /><br /><br />\n        <PDFRangeRequestViewer url={url} />\n    </>;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}